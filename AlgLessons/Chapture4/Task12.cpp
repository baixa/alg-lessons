#include <iostream>
#include <string>
#include <format>
#include "Task12.h"

using namespace std;

/// <summary>
/// Запускает выполнение (Глава 4) Задача #12 (4.17)
/// Заголовок: Бросок костей
/// Описание: 
///     
///     Напищите программу, моделирующую бросание двух костей. Про-
///     грамма должна использовать rand для бросания первой кости и
///     затем снова rand для метания второй кости. Затем должна подсчи-
///     тываться сумма двух значений. Замечание: поскольку каждая кость
///     может показывать целое значение от 1 до 6, то сумма двух чисел 
///     может варьироваться от 2 до 12 с наиболее частым значением  суммы 
///     7 и наименее частыми значениями 2 и 12. Рис. 4.24 показывает 
///     36 возможных комбинаций двух костей. Ваша программа должна 
///     выбрасывать две кости 36000 раз. Используйте одномерный массив,
///     чтобы подсчитывать, сколько раз выподает каждая возможная
///     сумма. Напечатайте результат в табулированном формате. Опреде-
///     лите приемлемость полученных результатов: поскольку существует 
///     шесть возможных способов выпадения 7, приблизительно в одной 
///     шестой части всех случаев бросания должно выпадать 7.
/// 
/// </summary>
/// <returns>Код результата выполнения программы</returns>
int runTask12()
{
    std::string input;

    while (input != "\\q") {
        /// 
        /// Отображаем документацию и базовое меню
        /// 
        system("CLS");

        std::cout <<
            R"STRING(
Запуск решения (Глава 4) Задача #12 (4.17)...
Название: "Бросок костей"
Описание: 
        
    Напищите программу, моделирующую бросание двух костей. Про-
    грамма должна использовать rand для бросания первой кости и
    затем снова rand для метания второй кости. Затем должна подсчи-
    тываться сумма двух значений. Замечание: поскольку каждая кость
    может показывать целое значение от 1 до 6, то сумма двух чисел 
    может варьироваться от 2 до 12 с наиболее частым значением  суммы 
    7 и наименее частыми значениями 2 и 12. Рис. 4.24 показывает 
    36 возможных комбинаций двух костей. Ваша программа должна 
    выбрасывать две кости 36000 раз. Используйте одномерный массив,
    чтобы подсчитывать, сколько раз выпадает каждая возможная
    сумма. Напечатайте результат в табулированном формате. Опреде-
    лите приемлемость полученных результатов: поскольку существует 
    шесть возможных способов выпадения 7, приблизительно в одной 
    шестой части всех случаев бросания должно выпадать 7.
         
Для запуска программы введите команду Y. Для выхода введите команду \q.)STRING" << endl;

        cin >> input;

        /// 
        /// Определяем, является ли введенное значение допустимым
        /// 
        if (input == "Y" || input == "y") {
            while (input != "\\q") {
                system("CLS");

                cout << "Этап 1 (\"Пробный запуск\"). Выполняется бросок костей..." << endl;

                int firstDiceThrow = throwDice();
                int secondDiceThrow = throwDice();

                cout << format("Кость #1: {} | Кость #2: {}", firstDiceThrow, secondDiceThrow) << endl;
                cout << "Этап 2 (\"Статистика значений\"). Выполняется 36000 бросков костей..." << endl;

                int throwDiceResultStatistic[11] = {0};
                for (int i = 0; i < 36000; i++)
                {
                    int sum = throwDice(2);
                    ++throwDiceResultStatistic[sum - 2];
                }

                cout << "\n\n" << "|";
                for (int i = 0; i < size(throwDiceResultStatistic); i++)
                {
                    cout << format("\t{}\t|", i + 2);
                }
                cout << endl;

                cout << "|";
                for (int i = 0; i < size(throwDiceResultStatistic); i++)
                {
                    cout << format("\t{}\t|", throwDiceResultStatistic[i]);
                }
                cout << endl;


                cout << "\n\nДля выхода введите \\q" << endl;
                cin >> input;
            }
        }
    }
    system("CLS");
    std::cout << "Завершение работы программы программы...";

    return 0;
}

/// <summary>
/// Симулирует поведение "Бросок игральной кости". Возвращает случайное значение от 1 до 6
/// </summary>
/// <returns>Случайное значение от 1 до 6</returns>
int throwDice() {
    return rand() % 6 + 1;
}

/// <summary>
/// Выполняет бросок игральной кости в количестве, переданном в качестве аргумента. 
/// Возвращает сумму очков на "кубиках".
/// </summary>
/// <param name="count">Количество бросков</param>
/// <returns>Сумма значений</returns>
int throwDice(int count) {
    int sum = 0;
    for (int i = 0; i < count; i++)
    {
        sum += throwDice();
    }
    return sum;
}